---
title: "Challenge 7: Incorporating Multiple Inputs"
subtitle: "Functions + Fish"
author: "Emi Degembe"
format: html
editor: source
embed-resources: true
code-tools: true
code-fold: true
theme: darkly 
message: false
warning: false
---

```{r}
#| label: setup

library(tidyverse)

df_fish <- read_csv(here::here("data", "BlackfootFish.csv"))
```

## Condition Index

A frequently used measurement for fish health is a condition index [(Wikipedia article)](https://en.wikipedia.org/wiki/Condition_index_in_fish). The following
simple equation can be used to calculate the approximate condition index of a
fish:

$$\text{condition index} = \frac{weight}{length^3} \times 100$$

**1. There are specific units required for the calculation of a condition index -- length must be in centimeters and weight must be in grams. The weight data for the Blackfoot River fish were collected in grams; the length data were collected in millimeters. Transform the length data to the correct units.**

```{r}
#| label: transform-data-to-have-correct-units

df_fish <- df_fish |>
              mutate(length = 0.1*(length))
```

**2. Collecting data of this sort can be very messy! Write a function that will replace unlikely `length` and `weight` measurements with `NA`. Your function should accept at least three inputs:**

+ **a vector of measurements,**
+ **the minimum reasonable value,**
+ **the maximum reasonable value.**

**If a value falls outside these bounds, you should replace it with an `NA`.**

::: callout-tip
If you are struggling with the structure of your function, I would suggest reading the [Mutating Function](https://r4ds.hadley.nz/functions.html#mutate-functions) from R4DS.
:::

```{r}
#| label: function-to-change-impossible-measurements-to-NA

replace_outliers <- function(min, max, measurement) {
  measurements <- ifelse(measurement < min | measurement > max, 
                         yes = NA, 
                         no = measurement)
  
  return(measurements)
}
```

**3. After consulting the [Montana Record Table](https://fwp.mt.gov/fish/anglingData/records) for the four species of trout included in these data, I have conjectured that it is unlikely to have measurements for fish below 5 cm and above 80 cm in length or below 10 g and above 4,000 g in weight. Use your function to modify the `length` and `weight` columns of the `fish` dataset based on my cutoffs.**

```{r}
#| label: modify-impossible-values-of-length-weight

df_fish <- df_fish |>
  mutate(length = replace_outliers(5, 80, length),
         weight = replace_outliers(10, 4000, weight))
```

**3. Write a function to calculate the condition index of a fish, given inputs of weight and length.**

::: callout-warning
Consider whether you will write a function that works with vectors (accepting
vectors as inputs) or a function that works with data frames (accepting a 
dataset and variable names as inputs)!
:::

```{r}
#| label: condition-function

calculate_cond_idx <- function(df, weight = weight, length = length)
{
  df |>
    mutate(condition_index = ({{weight}}/({{length}} ^ 3)) * 100)
}
```

**4. Make a thoughtful visualization of how fish conditions have varied over the duration of this study.**

::: callout-warning
### To be thoughtful...

... you need to use at least a third variable!
:::

```{r}
#| label: condition-indices-over-time
#| fig-cap: "RBT: rainbow trout WBT: westslope cutthroat trout"

calculate_cond_idx(df_fish) |>
  group_by(year, species, trip) |>
  summarize(mean_cond_idx = mean(condition_index, na.rm = TRUE), .groups = "drop") |>
  ggplot(
    aes(x = year, 
        y = mean_cond_idx, 
        color = fct_reorder(
          .f = species, 
          .x = mean_cond_idx, 
          .desc = TRUE)
        )) + 
  facet_wrap(~ trip, labeller = as_labeller(function(trip) paste("Trip", trip))) + 
  geom_line() + 
  geom_point() + 
  labs(
    title = "Mean Condition Index of Fish by Species", 
    x = "Year", 
    y = "", 
    color = "species"
  ) + 
  theme(aspect.ratio = 1, 
        axis.text.x = element_text(size = 8)) +
  scale_x_continuous(limits = c(1988, 2006), breaks = (seq(1980, 2008, 2))) + 
  scale_color_manual(values = c("#68B893", "#FF7C68", "#007C74", "#F7D359")) 
  # color palette based off animal crossing
```
